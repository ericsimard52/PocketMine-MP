* Function code
#+NAME: critical
#+BEGIN_SRC php
function critical_error($message){
echo "[ERROR] $message" . PHP_EOL;
}
#+END_SRC

#+NAME: check
#+BEGIN_SRC php
function check_platform_dependencies(){
if(version_compare(MIN_PHP_VERSION, PHP_VERSION) > 0){
return [
\pocketmine\NAME . " requires PHP >= " . MIN_PHP_VERSION . ", but you have PHP " . PHP_VERSION . "."
];
}

$messages = [];

if(PHP_INT_SIZE < 8){
}

if(php_sapi_name() !== "cli"){
$messages[] = "You must run " . \pocketmine\NAME . " using the CLI.";
}

$extensions = [
"bcmath" => "BC Math",
"curl" => "cURL",
"crypto" => "php-crypto",
"ctype" => "ctype",
"date" => "Date",
"gmp" => "GMP",
"hash" => "Hash",
"json" => "JSON",
"mbstring" => "Multibyte String",
"openssl" => "OpenSSL",
"pcre" => "PCRE",
"phar" => "Phar",
"pthreads" => "pthreads",
"reflection" => "Reflection",
"sockets" => "Sockets",
"spl" => "SPL",
"yaml" => "YAML",
"zip" => "Zip",
"zlib" => "Zlib"
];

foreach($extensions as $ext => $name){
if(!extension_loaded($ext)){
$messages[] = "Unable to find the $name ($ext) extension.";
}
}

if(extension_loaded("pthreads")){
$pthreads_version = phpversion("pthreads");
if(substr_count($pthreads_version, ".") < 2){
$pthreads_version = "0.$pthreads_version";
}
if(version_compare($pthreads_version, "3.1.7dev") < 0){
$messages[] = "pthreads >= 3.1.7dev is required, while you have $pthreads_version.";
}
}

if(extension_loaded("leveldb")){
$leveldb_version = phpversion("leveldb");
if(version_compare($leveldb_version, "0.2.1") < 0){
$messages[] = "php-leveldb >= 0.2.1 is required, while you have $leveldb_version.";
}
}

if(extension_loaded("pocketmine")){
$messages[] = "The native PocketMine extension is no longer supported.";
}

return $messages;
}
#+END_SRC

#+NAME: MAIN
#+BEGIN_SRC php
  if(!empty($messages = check_platform_dependencies())){
    echo PHP_EOL;
    $binary = version_compare(PHP_VERSION, "5.4") >= 0 ? PHP_BINARY : "unknown";
    critical_error("Selected PHP binary ($binary) does not satisfy some requirements.");
    foreach($messages as $m){
      echo " - $m" . PHP_EOL;
    }
    echo PHP_EOL;
    exit(1);
  }
  unset($messages);

  error_reporting(-1);

  if(\Phar::running(true) !== ""){
  }else{
    define('pocketmine\PATH', dirname(__FILE__, 3) . DIRECTORY_SEPARATOR);
  }

  $opts = getopt("", ["bootstrap:"]);
  if(isset($opts["bootstrap"])){
    $bootstrap = realpath($opts["bootstrap"]) ?: $opts["bootstrap"];
  }else{
  }
  define('pocketmine\COMPOSER_AUTOLOADER_PATH', $bootstrap);

  if(\pocketmine\COMPOSER_AUTOLOADER_PATH !== false and is_file(\pocketmine\COMPOSER_AUTOLOADER_PATH)){
    require_once(\pocketmine\COMPOSER_AUTOLOADER_PATH);
  }else{
    critical_error("Composer autoloader not found at " . $bootstrap);
    exit(1);
  }

  set_error_handler([Utils::class, 'errorExceptionHandler']);

  $autoloader = new \BaseClassLoader();
  $autoloader->register(false);


  ini_set("allow_url_fopen", '1');
  ini_set("display_errors", '1');
  ini_set("display_startup_errors", '1');
  ini_set("default_charset", "utf-8");

  ini_set("memory_limit", '-1');
  define('pocketmine\START_TIME', microtime(true));

  define('pocketmine\RESOURCE_PATH', \pocketmine\PATH . 'resources' . DIRECTORY_SEPARATOR);

  $opts = getopt("", ["data:", "plugins:", "no-wizard"]);

  define('pocketmine\DATA', isset($opts["data"]) ? $opts["data"] . DIRECTORY_SEPARATOR : realpath(getcwd()) . DIRECTORY_SEPARATOR);
  define('pocketmine\PLUGIN_PATH', isset($opts["plugins"]) ? $opts["plugins"] . DIRECTORY_SEPARATOR : realpath(getcwd()) . DIRECTORY_SEPARATOR . "plugins" . DIRECTORY_SEPARATOR);

  if(!file_exists(\pocketmine\DATA)){
    mkdir(\pocketmine\DATA, 0777, true);
  }

  Timezone::init();

  $logger = new MainLogger(\pocketmine\DATA . "server.log");
  $logger->registerStatic();
  \GlobalLogger::set($logger);

  if(extension_loaded("xdebug")){
    $logger->warning(PHP_EOL . PHP_EOL . PHP_EOL . "\tYou are running " . \pocketmine\NAME . " with xdebug enabled. This has a major impact on performance." . PHP_EOL . PHP_EOL);
  }

  if(\Phar::running(true) === ""){
    $logger->warning("Non-packaged " . \pocketmine\NAME . " installation detected. Consider using a phar in production for better performance.");
  }

  $version = new VersionString(\pocketmine\BASE_VERSION, \pocketmine\IS_DEVELOPMENT_BUILD, \pocketmine\BUILD_NUMBER);
  define('pocketmine\VERSION', $version->getFullVersion(true));

  $gitHash = str_repeat("00", 20);

  if(\Phar::running(true) === ""){
    if(Utils::execute("git rev-parse HEAD", $out) === 0 and $out !== false and strlen($out = trim($out)) === 40){
      $gitHash = trim($out);
      $gitHash .= "-dirty";
    }
  }
  }else{
     $phar = new \Phar(\Phar::running(false));
     $meta = $phar->getMetadata();
     if(isset($meta["git"])){
       $gitHash = $meta["git"];
     }
   }

  define('pocketmine\GIT_COMMIT', $gitHash);


  @define("INT32_MASK", is_int(0xffffffff) ? 0xffffffff : -1);

  $exitCode = 0;
  do{
    if(!file_exists(\pocketmine\DATA . "server.properties") and !isset($opts["no-wizard"])){
      $installer = new SetupWizard();
      if(!$installer->run()){
        $exitCode = -1;
        break;
      }
    }

    ThreadManager::init();
    new Server($autoloader, $logger, \pocketmine\DATA, \pocketmine\PLUGIN_PATH);

    $logger->info("Stopping other threads");

    $killer = new ServerKiller(8);
    $killer->start(PTHREADS_INHERIT_NONE);

    if(ThreadManager::getInstance()->stopAll() > 0){
      if(\pocketmine\DEBUG > 1){
        echo "Some threads could not be stopped, performing a force-kill" . PHP_EOL . PHP_EOL;
      }
      Utils::kill(getmypid());
    }
  }while(false);

  $logger->shutdown();
  $logger->join();

  echo Terminal::$FORMAT_RESET . PHP_EOL;

  exit($exitCode);
#+END_SRC
